#pragma once
// Note: this is a temporary fix to get windows build working as POC
// we will need to include binary articacts using this method rather
// than assembly on windows, but it can be auto-generated by coming
// tooling

#include "lo.h"

const char _binary_main_js_start[] = {
  0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x72, 0x61,
  0x70, 0x20, 0x28, 0x68, 0x2c, 0x20, 0x66, 0x6e, 0x2c, 0x20, 0x70, 0x6c,
  0x65, 0x6e, 0x20, 0x3d, 0x20, 0x30, 0x29, 0x20, 0x7b, 0x0a, 0x20, 0x20,
  0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x3d,
  0x20, 0x66, 0x6e, 0x0a, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20,
  0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x6e, 0x65,
  0x77, 0x20, 0x41, 0x72, 0x72, 0x61, 0x79, 0x28, 0x70, 0x6c, 0x65, 0x6e,
  0x29, 0x29, 0x2e, 0x66, 0x69, 0x6c, 0x6c, 0x28, 0x30, 0x29, 0x2e, 0x6d,
  0x61, 0x70, 0x28, 0x28, 0x5f, 0x2c, 0x20, 0x69, 0x29, 0x20, 0x3d, 0x3e,
  0x20, 0x60, 0x70, 0x24, 0x7b, 0x69, 0x7d, 0x60, 0x29, 0x2e, 0x6a, 0x6f,
  0x69, 0x6e, 0x28, 0x27, 0x2c, 0x20, 0x27, 0x29, 0x0a, 0x20, 0x20, 0x63,
  0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x20, 0x3d, 0x20, 0x6e, 0x65, 0x77,
  0x20, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x0a, 0x20,
  0x20, 0x20, 0x20, 0x27, 0x68, 0x27, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20,
  0x27, 0x63, 0x61, 0x6c, 0x6c, 0x27, 0x2c, 0x0a, 0x20, 0x20, 0x20, 0x20,
  0x60, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x66, 0x75, 0x6e, 0x63,
  0x74, 0x69, 0x6f, 0x6e, 0x20, 0x24, 0x7b, 0x66, 0x6e, 0x2e, 0x6e, 0x61,
  0x6d, 0x65, 0x7d, 0x20, 0x28, 0x24, 0x7b, 0x70, 0x61, 0x72, 0x61, 0x6d,
  0x73, 0x7d, 0x29, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x61,
  0x6c, 0x6c, 0x28, 0x24, 0x7b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x7d,
  0x24, 0x7b, 0x70, 0x6c, 0x65, 0x6e, 0x20, 0x3e, 0x20, 0x30, 0x20, 0x3f,
  0x20, 0x27, 0x2c, 0x20, 0x27, 0x20, 0x3a, 0x20, 0x27, 0x27, 0x7d, 0x68,
  0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72,
  0x6e, 0x20, 0x68, 0x5b, 0x30, 0x5d, 0x20, 0x2b, 0x20, 0x28, 0x28, 0x32,
  0x20, 0x2a, 0x2a, 0x20, 0x33, 0x32, 0x29, 0x20, 0x2a, 0x20, 0x68, 0x5b,
  0x31, 0x5d, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x7d, 0x60, 0x2c, 0x29, 0x0a,
  0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x75, 0x6e, 0x20,
  0x3d, 0x20, 0x66, 0x28, 0x68, 0x2c, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x29,
  0x0a, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x66, 0x6e, 0x2e, 0x73, 0x74,
  0x61, 0x74, 0x65, 0x29, 0x20, 0x66, 0x75, 0x6e, 0x2e, 0x73, 0x74, 0x61,
  0x74, 0x65, 0x20, 0x3d, 0x20, 0x66, 0x6e, 0x2e, 0x73, 0x74, 0x61, 0x74,
  0x65, 0x0a, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x66,
  0x75, 0x6e, 0x0a, 0x7d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20,
  0x7b, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2c, 0x20, 0x70, 0x72, 0x69,
  0x6e, 0x74, 0x20, 0x7d, 0x20, 0x3d, 0x20, 0x6c, 0x6f, 0x0a, 0x63, 0x6f,
  0x6e, 0x73, 0x74, 0x20, 0x68, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x3d,
  0x20, 0x77, 0x72, 0x61, 0x70, 0x28, 0x6e, 0x65, 0x77, 0x20, 0x55, 0x69,
  0x6e, 0x74, 0x33, 0x32, 0x41, 0x72, 0x72, 0x61, 0x79, 0x28, 0x32, 0x29,
  0x2c, 0x20, 0x6c, 0x6f, 0x2e, 0x68, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x29,
  0x0a, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x28, 0x60, 0x24, 0x7b, 0x68, 0x72,
  0x74, 0x69, 0x6d, 0x65, 0x28, 0x29, 0x20, 0x2d, 0x20, 0x73, 0x74, 0x61,
  0x72, 0x74, 0x7d, 0x5c, 0x6e, 0x60, 0x29
};
static unsigned int main_js_len = 499;

void register_builtins() {
  lo::builtins_add("main.js", _binary_main_js_start, main_js_len);
}

static const char* main_js = _binary_main_js_start;
static const char* v8flags = "--stack-trace-limit=10 --use-strict --turbo-fast-api-calls --no-freeze-flags-after-init";
static unsigned int _v8flags_from_commandline = 1;
static unsigned int _v8_threads = 2;
static unsigned int _v8_cleanup = 0;
static unsigned int _on_exit = 0;

