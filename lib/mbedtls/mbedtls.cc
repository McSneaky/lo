
// [do not edit,<auto-generated />]
// This file has been automatically generated, please do not change unless you disable auto-generation in the Makefile  
#include <mbedtls/x509.h>
#include <mbedtls/entropy.h>
#include <mbedtls/ssl.h>
#include <mbedtls/net_sockets.h>
#include <lo.h>

namespace lo {
namespace mbedtls {

using v8::String;
using v8::FunctionCallbackInfo;
using v8::Array;
using v8::Local;
using v8::ObjectTemplate;
using v8::Isolate;
using v8::Value;
using v8::Uint32Array;
using v8::ArrayBuffer;
using v8::Context;
using v8::Integer;
using v8::Function;
using v8::NewStringType;
using v8::Object;
using v8::BackingStore;
using v8::TryCatch;
using v8::ScriptCompiler;
using v8::Module;
using v8::FixedArray;
using v8::ScriptOrigin;
using v8::SharedArrayBuffer;
using v8::MaybeLocal;
using v8::HandleScope;
using v8::Promise;
using v8::Number;
using v8::StackTrace;
using v8::Message;
using v8::StackFrame;
using v8::Maybe;
using v8::FunctionTemplate;
using v8::FunctionCallback;
using v8::PromiseRejectMessage;
using v8::CFunction;
using v8::Global;
using v8::Exception;
using v8::CTypeInfo;
using v8::PropertyAttribute;
using v8::Signature;
using v8::ConstructorBehavior;
using v8::SideEffectType;
using v8::kPromiseRejectAfterResolved;
using v8::kPromiseResolveAfterResolved;
using v8::kPromiseHandlerAddedAfterReject;
using v8::Data;
using v8::PrimitiveArray;
using v8::TypedArray;
using v8::Uint8Array;
using v8::Boolean;
using v8::ModuleRequest;
using v8::CFunctionInfo;
using v8::OOMDetails;
using v8::V8;
using v8::BigInt;



void mbedtls_x509_crt_initFast(void* p, void* p0);
v8::CTypeInfo cargsmbedtls_x509_crt_init[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcmbedtls_x509_crt_init = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infombedtls_x509_crt_init = v8::CFunctionInfo(rcmbedtls_x509_crt_init, 2, cargsmbedtls_x509_crt_init);
v8::CFunction pFmbedtls_x509_crt_init = v8::CFunction((const void*)&mbedtls_x509_crt_initFast, &infombedtls_x509_crt_init);

void mbedtls_net_initFast(void* p, void* p0);
v8::CTypeInfo cargsmbedtls_net_init[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcmbedtls_net_init = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infombedtls_net_init = v8::CFunctionInfo(rcmbedtls_net_init, 2, cargsmbedtls_net_init);
v8::CFunction pFmbedtls_net_init = v8::CFunction((const void*)&mbedtls_net_initFast, &infombedtls_net_init);

void mbedtls_ssl_initFast(void* p, void* p0);
v8::CTypeInfo cargsmbedtls_ssl_init[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcmbedtls_ssl_init = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infombedtls_ssl_init = v8::CFunctionInfo(rcmbedtls_ssl_init, 2, cargsmbedtls_ssl_init);
v8::CFunction pFmbedtls_ssl_init = v8::CFunction((const void*)&mbedtls_ssl_initFast, &infombedtls_ssl_init);

void mbedtls_ssl_config_initFast(void* p, void* p0);
v8::CTypeInfo cargsmbedtls_ssl_config_init[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcmbedtls_ssl_config_init = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infombedtls_ssl_config_init = v8::CFunctionInfo(rcmbedtls_ssl_config_init, 2, cargsmbedtls_ssl_config_init);
v8::CFunction pFmbedtls_ssl_config_init = v8::CFunction((const void*)&mbedtls_ssl_config_initFast, &infombedtls_ssl_config_init);

void mbedtls_entropy_initFast(void* p, void* p0);
v8::CTypeInfo cargsmbedtls_entropy_init[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcmbedtls_entropy_init = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infombedtls_entropy_init = v8::CFunctionInfo(rcmbedtls_entropy_init, 2, cargsmbedtls_entropy_init);
v8::CFunction pFmbedtls_entropy_init = v8::CFunction((const void*)&mbedtls_entropy_initFast, &infombedtls_entropy_init);

int32_t mbedtls_x509_crt_parse_derFast(void* p, void* p0, void* p1, uint32_t p2);
v8::CTypeInfo cargsmbedtls_x509_crt_parse_der[4] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint32),
};
v8::CTypeInfo rcmbedtls_x509_crt_parse_der = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
v8::CFunctionInfo infombedtls_x509_crt_parse_der = v8::CFunctionInfo(rcmbedtls_x509_crt_parse_der, 4, cargsmbedtls_x509_crt_parse_der);
v8::CFunction pFmbedtls_x509_crt_parse_der = v8::CFunction((const void*)&mbedtls_x509_crt_parse_derFast, &infombedtls_x509_crt_parse_der);



void mbedtls_x509_crt_initSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_x509_crt* v0 = reinterpret_cast<mbedtls_x509_crt*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  mbedtls_x509_crt_init(v0);
}

void mbedtls_x509_crt_initFast(void* p, void* p0) {
  mbedtls_x509_crt* v0 = reinterpret_cast<mbedtls_x509_crt*>(p0);
  mbedtls_x509_crt_init(v0);
}
void mbedtls_net_initSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_net_context* v0 = reinterpret_cast<mbedtls_net_context*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  mbedtls_net_init(v0);
}

void mbedtls_net_initFast(void* p, void* p0) {
  mbedtls_net_context* v0 = reinterpret_cast<mbedtls_net_context*>(p0);
  mbedtls_net_init(v0);
}
void mbedtls_ssl_initSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_ssl_context* v0 = reinterpret_cast<mbedtls_ssl_context*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  mbedtls_ssl_init(v0);
}

void mbedtls_ssl_initFast(void* p, void* p0) {
  mbedtls_ssl_context* v0 = reinterpret_cast<mbedtls_ssl_context*>(p0);
  mbedtls_ssl_init(v0);
}
void mbedtls_ssl_config_initSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_ssl_config* v0 = reinterpret_cast<mbedtls_ssl_config*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  mbedtls_ssl_config_init(v0);
}

void mbedtls_ssl_config_initFast(void* p, void* p0) {
  mbedtls_ssl_config* v0 = reinterpret_cast<mbedtls_ssl_config*>(p0);
  mbedtls_ssl_config_init(v0);
}
void mbedtls_entropy_initSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_entropy_context* v0 = reinterpret_cast<mbedtls_entropy_context*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  mbedtls_entropy_init(v0);
}

void mbedtls_entropy_initFast(void* p, void* p0) {
  mbedtls_entropy_context* v0 = reinterpret_cast<mbedtls_entropy_context*>(p0);
  mbedtls_entropy_init(v0);
}
void mbedtls_x509_crt_parse_derSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  mbedtls_x509_crt* v0 = reinterpret_cast<mbedtls_x509_crt*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  const unsigned char* v1 = reinterpret_cast<const unsigned char*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  uint32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t rc = mbedtls_x509_crt_parse_der(v0, v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t mbedtls_x509_crt_parse_derFast(void* p, void* p0, void* p1, uint32_t p2) {
  mbedtls_x509_crt* v0 = reinterpret_cast<mbedtls_x509_crt*>(p0);
  const unsigned char* v1 = reinterpret_cast<const unsigned char*>(p1);
  uint32_t v2 = p2;
  return mbedtls_x509_crt_parse_der(v0, v1, v2);
}

void Init(Isolate* isolate, Local<ObjectTemplate> target) {
  Local<ObjectTemplate> module = ObjectTemplate::New(isolate);
  SET_FAST_METHOD(isolate, module, "mbedtls_x509_crt_init", &pFmbedtls_x509_crt_init, mbedtls_x509_crt_initSlow);
  SET_FAST_METHOD(isolate, module, "mbedtls_net_init", &pFmbedtls_net_init, mbedtls_net_initSlow);
  SET_FAST_METHOD(isolate, module, "mbedtls_ssl_init", &pFmbedtls_ssl_init, mbedtls_ssl_initSlow);
  SET_FAST_METHOD(isolate, module, "mbedtls_ssl_config_init", &pFmbedtls_ssl_config_init, mbedtls_ssl_config_initSlow);
  SET_FAST_METHOD(isolate, module, "mbedtls_entropy_init", &pFmbedtls_entropy_init, mbedtls_entropy_initSlow);
  SET_FAST_METHOD(isolate, module, "mbedtls_x509_crt_parse_der", &pFmbedtls_x509_crt_parse_der, mbedtls_x509_crt_parse_derSlow);


  SET_VALUE(isolate, module, "struct_mbedtls_net_context_size", Integer::New(isolate, sizeof(mbedtls_net_context)));
  SET_VALUE(isolate, module, "struct_mbedtls_x509_crt_size", Integer::New(isolate, sizeof(mbedtls_x509_crt)));
  SET_VALUE(isolate, module, "struct_mbedtls_entropy_context_size", Integer::New(isolate, sizeof(mbedtls_entropy_context)));
  SET_VALUE(isolate, module, "struct_mbedtls_ssl_context_size", Integer::New(isolate, sizeof(mbedtls_ssl_context)));
  SET_VALUE(isolate, module, "struct_mbedtls_ssl_config_size", Integer::New(isolate, sizeof(mbedtls_ssl_config)));

  SET_MODULE(isolate, target, "mbedtls", module);
}
} // namespace mbedtls
} // namespace lo

extern "C" {
  void* _register_mbedtls() {
    return (void*)lo::mbedtls::Init;
  }
}
