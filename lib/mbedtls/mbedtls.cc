
// [do not edit,<auto-generated />]
// This file has been automatically generated, please do not change unless you disable auto-generation in the Makefile  
#include <mbedtls/x509.h>
#include <mbedtls/entropy.h>
#include <mbedtls/ssl.h>
#include <mbedtls/net_sockets.h>
#include <mbedtls/ctr_drbg.h>
#include <mbedtls/debug.h>
#include <mbedtls/platform.h>
#include <lo.h>

namespace lo {
namespace mbedtls {

using v8::String;
using v8::FunctionCallbackInfo;
using v8::Array;
using v8::Local;
using v8::ObjectTemplate;
using v8::Isolate;
using v8::Value;
using v8::Uint32Array;
using v8::ArrayBuffer;
using v8::Context;
using v8::Integer;
using v8::Function;
using v8::NewStringType;
using v8::Object;
using v8::BackingStore;
using v8::TryCatch;
using v8::ScriptCompiler;
using v8::Module;
using v8::FixedArray;
using v8::ScriptOrigin;
using v8::SharedArrayBuffer;
using v8::MaybeLocal;
using v8::HandleScope;
using v8::Promise;
using v8::Number;
using v8::StackTrace;
using v8::Message;
using v8::StackFrame;
using v8::Maybe;
using v8::FunctionTemplate;
using v8::FunctionCallback;
using v8::PromiseRejectMessage;
using v8::CFunction;
using v8::Global;
using v8::Exception;
using v8::CTypeInfo;
using v8::PropertyAttribute;
using v8::Signature;
using v8::ConstructorBehavior;
using v8::SideEffectType;
using v8::kPromiseRejectAfterResolved;
using v8::kPromiseResolveAfterResolved;
using v8::kPromiseHandlerAddedAfterReject;
using v8::Data;
using v8::PrimitiveArray;
using v8::TypedArray;
using v8::Uint8Array;
using v8::Boolean;
using v8::ModuleRequest;
using v8::CFunctionInfo;
using v8::OOMDetails;
using v8::V8;
using v8::BigInt;


typedef int (*mbedtls_entropy_callback)(void *, unsigned char *, size_t);
typedef int (*mbedtls_rng_callback)(void *, unsigned char *, size_t);
typedef void (*mbedtls_dbg_callback)(void *, int, const char *, int, const char *);


void x509_crt_initFast(void* p, void* p0);
v8::CTypeInfo cargsx509_crt_init[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcx509_crt_init = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infox509_crt_init = v8::CFunctionInfo(rcx509_crt_init, 2, cargsx509_crt_init);
v8::CFunction pFx509_crt_init = v8::CFunction((const void*)&x509_crt_initFast, &infox509_crt_init);

void net_initFast(void* p, void* p0);
v8::CTypeInfo cargsnet_init[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcnet_init = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infonet_init = v8::CFunctionInfo(rcnet_init, 2, cargsnet_init);
v8::CFunction pFnet_init = v8::CFunction((const void*)&net_initFast, &infonet_init);

void ssl_initFast(void* p, void* p0);
v8::CTypeInfo cargsssl_init[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcssl_init = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infossl_init = v8::CFunctionInfo(rcssl_init, 2, cargsssl_init);
v8::CFunction pFssl_init = v8::CFunction((const void*)&ssl_initFast, &infossl_init);

void ssl_config_initFast(void* p, void* p0);
v8::CTypeInfo cargsssl_config_init[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcssl_config_init = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infossl_config_init = v8::CFunctionInfo(rcssl_config_init, 2, cargsssl_config_init);
v8::CFunction pFssl_config_init = v8::CFunction((const void*)&ssl_config_initFast, &infossl_config_init);

void entropy_initFast(void* p, void* p0);
v8::CTypeInfo cargsentropy_init[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcentropy_init = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infoentropy_init = v8::CFunctionInfo(rcentropy_init, 2, cargsentropy_init);
v8::CFunction pFentropy_init = v8::CFunction((const void*)&entropy_initFast, &infoentropy_init);

void ctr_drbg_initFast(void* p, void* p0);
v8::CTypeInfo cargsctr_drbg_init[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcctr_drbg_init = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infoctr_drbg_init = v8::CFunctionInfo(rcctr_drbg_init, 2, cargsctr_drbg_init);
v8::CFunction pFctr_drbg_init = v8::CFunction((const void*)&ctr_drbg_initFast, &infoctr_drbg_init);

int32_t x509_crt_parse_derFast(void* p, void* p0, void* p1, uint32_t p2);
v8::CTypeInfo cargsx509_crt_parse_der[4] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint32),
};
v8::CTypeInfo rcx509_crt_parse_der = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
v8::CFunctionInfo infox509_crt_parse_der = v8::CFunctionInfo(rcx509_crt_parse_der, 4, cargsx509_crt_parse_der);
v8::CFunction pFx509_crt_parse_der = v8::CFunction((const void*)&x509_crt_parse_derFast, &infox509_crt_parse_der);

void debug_set_thresholdFast(void* p, int32_t p0);
v8::CTypeInfo cargsdebug_set_threshold[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kInt32),
};
v8::CTypeInfo rcdebug_set_threshold = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infodebug_set_threshold = v8::CFunctionInfo(rcdebug_set_threshold, 2, cargsdebug_set_threshold);
v8::CFunction pFdebug_set_threshold = v8::CFunction((const void*)&debug_set_thresholdFast, &infodebug_set_threshold);

int32_t ctr_drbg_seedFast(void* p, void* p0, void* p1, void* p2, void* p3, uint32_t p4);
v8::CTypeInfo cargsctr_drbg_seed[6] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint32),
};
v8::CTypeInfo rcctr_drbg_seed = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
v8::CFunctionInfo infoctr_drbg_seed = v8::CFunctionInfo(rcctr_drbg_seed, 6, cargsctr_drbg_seed);
v8::CFunction pFctr_drbg_seed = v8::CFunction((const void*)&ctr_drbg_seedFast, &infoctr_drbg_seed);

void exitFast(void* p, int32_t p0);
v8::CTypeInfo cargsexit[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kInt32),
};
v8::CTypeInfo rcexit = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infoexit = v8::CFunctionInfo(rcexit, 2, cargsexit);
v8::CFunction pFexit = v8::CFunction((const void*)&exitFast, &infoexit);

int32_t x509_crt_parseFast(void* p, void* p0, void* p1, uint32_t p2);
v8::CTypeInfo cargsx509_crt_parse[4] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint32),
};
v8::CTypeInfo rcx509_crt_parse = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
v8::CFunctionInfo infox509_crt_parse = v8::CFunctionInfo(rcx509_crt_parse, 4, cargsx509_crt_parse);
v8::CFunction pFx509_crt_parse = v8::CFunction((const void*)&x509_crt_parseFast, &infox509_crt_parse);

int32_t ssl_config_defaultsFast(void* p, void* p0, int32_t p1, int32_t p2, int32_t p3);
v8::CTypeInfo cargsssl_config_defaults[5] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kInt32),
  v8::CTypeInfo(v8::CTypeInfo::Type::kInt32),
  v8::CTypeInfo(v8::CTypeInfo::Type::kInt32),
};
v8::CTypeInfo rcssl_config_defaults = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
v8::CFunctionInfo infossl_config_defaults = v8::CFunctionInfo(rcssl_config_defaults, 5, cargsssl_config_defaults);
v8::CFunction pFssl_config_defaults = v8::CFunction((const void*)&ssl_config_defaultsFast, &infossl_config_defaults);

int32_t ssl_conf_max_frag_lenFast(void* p, void* p0, uint8_t p1);
v8::CTypeInfo cargsssl_conf_max_frag_len[3] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kVoid),
};
v8::CTypeInfo rcssl_conf_max_frag_len = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
v8::CFunctionInfo infossl_conf_max_frag_len = v8::CFunctionInfo(rcssl_conf_max_frag_len, 3, cargsssl_conf_max_frag_len);
v8::CFunction pFssl_conf_max_frag_len = v8::CFunction((const void*)&ssl_conf_max_frag_lenFast, &infossl_conf_max_frag_len);

void ssl_conf_rngFast(void* p, void* p0, void* p1, void* p2);
v8::CTypeInfo cargsssl_conf_rng[4] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcssl_conf_rng = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infossl_conf_rng = v8::CFunctionInfo(rcssl_conf_rng, 4, cargsssl_conf_rng);
v8::CFunction pFssl_conf_rng = v8::CFunction((const void*)&ssl_conf_rngFast, &infossl_conf_rng);

void ssl_conf_dbgFast(void* p, void* p0, void* p1, void* p2);
v8::CTypeInfo cargsssl_conf_dbg[4] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcssl_conf_dbg = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infossl_conf_dbg = v8::CFunctionInfo(rcssl_conf_dbg, 4, cargsssl_conf_dbg);
v8::CFunction pFssl_conf_dbg = v8::CFunction((const void*)&ssl_conf_dbgFast, &infossl_conf_dbg);

void ssl_conf_read_timeoutFast(void* p, void* p0, uint32_t p1);
v8::CTypeInfo cargsssl_conf_read_timeout[3] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint32),
};
v8::CTypeInfo rcssl_conf_read_timeout = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infossl_conf_read_timeout = v8::CFunctionInfo(rcssl_conf_read_timeout, 3, cargsssl_conf_read_timeout);
v8::CFunction pFssl_conf_read_timeout = v8::CFunction((const void*)&ssl_conf_read_timeoutFast, &infossl_conf_read_timeout);

void ssl_conf_session_ticketsFast(void* p, void* p0, int32_t p1);
v8::CTypeInfo cargsssl_conf_session_tickets[3] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kInt32),
};
v8::CTypeInfo rcssl_conf_session_tickets = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infossl_conf_session_tickets = v8::CFunctionInfo(rcssl_conf_session_tickets, 3, cargsssl_conf_session_tickets);
v8::CFunction pFssl_conf_session_tickets = v8::CFunction((const void*)&ssl_conf_session_ticketsFast, &infossl_conf_session_tickets);

void ssl_conf_renegotiationFast(void* p, void* p0, int32_t p1);
v8::CTypeInfo cargsssl_conf_renegotiation[3] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kInt32),
};
v8::CTypeInfo rcssl_conf_renegotiation = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infossl_conf_renegotiation = v8::CFunctionInfo(rcssl_conf_renegotiation, 3, cargsssl_conf_renegotiation);
v8::CFunction pFssl_conf_renegotiation = v8::CFunction((const void*)&ssl_conf_renegotiationFast, &infossl_conf_renegotiation);

void ssl_conf_ca_chainFast(void* p, void* p0, void* p1, void* p2);
v8::CTypeInfo cargsssl_conf_ca_chain[4] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcssl_conf_ca_chain = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infossl_conf_ca_chain = v8::CFunctionInfo(rcssl_conf_ca_chain, 4, cargsssl_conf_ca_chain);
v8::CFunction pFssl_conf_ca_chain = v8::CFunction((const void*)&ssl_conf_ca_chainFast, &infossl_conf_ca_chain);

void ssl_conf_min_versionFast(void* p, void* p0, int32_t p1, int32_t p2);
v8::CTypeInfo cargsssl_conf_min_version[4] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kInt32),
  v8::CTypeInfo(v8::CTypeInfo::Type::kInt32),
};
v8::CTypeInfo rcssl_conf_min_version = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infossl_conf_min_version = v8::CFunctionInfo(rcssl_conf_min_version, 4, cargsssl_conf_min_version);
v8::CFunction pFssl_conf_min_version = v8::CFunction((const void*)&ssl_conf_min_versionFast, &infossl_conf_min_version);

void ssl_conf_max_versionFast(void* p, void* p0, int32_t p1, int32_t p2);
v8::CTypeInfo cargsssl_conf_max_version[4] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kInt32),
  v8::CTypeInfo(v8::CTypeInfo::Type::kInt32),
};
v8::CTypeInfo rcssl_conf_max_version = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infossl_conf_max_version = v8::CFunctionInfo(rcssl_conf_max_version, 4, cargsssl_conf_max_version);
v8::CFunction pFssl_conf_max_version = v8::CFunction((const void*)&ssl_conf_max_versionFast, &infossl_conf_max_version);

int32_t ssl_setupFast(void* p, void* p0, void* p1);
v8::CTypeInfo cargsssl_setup[3] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcssl_setup = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
v8::CFunctionInfo infossl_setup = v8::CFunctionInfo(rcssl_setup, 3, cargsssl_setup);
v8::CFunction pFssl_setup = v8::CFunction((const void*)&ssl_setupFast, &infossl_setup);

int32_t ssl_set_hostnameFast(void* p, void* p0, struct FastOneByteString* const p1);
v8::CTypeInfo cargsssl_set_hostname[3] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kSeqOneByteString),
};
v8::CTypeInfo rcssl_set_hostname = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
v8::CFunctionInfo infossl_set_hostname = v8::CFunctionInfo(rcssl_set_hostname, 3, cargsssl_set_hostname);
v8::CFunction pFssl_set_hostname = v8::CFunction((const void*)&ssl_set_hostnameFast, &infossl_set_hostname);

void ssl_set_bioFast(void* p, void* p0, void* p1, void* p2, void* p3, void* p4);
v8::CTypeInfo cargsssl_set_bio[6] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcssl_set_bio = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infossl_set_bio = v8::CFunctionInfo(rcssl_set_bio, 6, cargsssl_set_bio);
v8::CFunction pFssl_set_bio = v8::CFunction((const void*)&ssl_set_bioFast, &infossl_set_bio);

int32_t net_connectFast(void* p, void* p0, struct FastOneByteString* const p1, struct FastOneByteString* const p2, int32_t p3);
v8::CTypeInfo cargsnet_connect[5] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kSeqOneByteString),
  v8::CTypeInfo(v8::CTypeInfo::Type::kSeqOneByteString),
  v8::CTypeInfo(v8::CTypeInfo::Type::kInt32),
};
v8::CTypeInfo rcnet_connect = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
v8::CFunctionInfo infonet_connect = v8::CFunctionInfo(rcnet_connect, 5, cargsnet_connect);
v8::CFunction pFnet_connect = v8::CFunction((const void*)&net_connectFast, &infonet_connect);

int32_t net_set_blockFast(void* p, void* p0);
v8::CTypeInfo cargsnet_set_block[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcnet_set_block = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
v8::CFunctionInfo infonet_set_block = v8::CFunctionInfo(rcnet_set_block, 2, cargsnet_set_block);
v8::CFunction pFnet_set_block = v8::CFunction((const void*)&net_set_blockFast, &infonet_set_block);

int32_t ssl_handshakeFast(void* p, void* p0);
v8::CTypeInfo cargsssl_handshake[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcssl_handshake = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
v8::CFunctionInfo infossl_handshake = v8::CFunctionInfo(rcssl_handshake, 2, cargsssl_handshake);
v8::CFunction pFssl_handshake = v8::CFunction((const void*)&ssl_handshakeFast, &infossl_handshake);

void ssl_get_versionFast(void* p, void* p0, struct FastApiTypedArray* const p_ret);
v8::CTypeInfo cargsssl_get_version[3] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone)
};
v8::CTypeInfo rcssl_get_version = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infossl_get_version = v8::CFunctionInfo(rcssl_get_version, 3, cargsssl_get_version);
v8::CFunction pFssl_get_version = v8::CFunction((const void*)&ssl_get_versionFast, &infossl_get_version);

void ssl_get_ciphersuiteFast(void* p, void* p0, struct FastApiTypedArray* const p_ret);
v8::CTypeInfo cargsssl_get_ciphersuite[3] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint32, v8::CTypeInfo::SequenceType::kIsTypedArray, v8::CTypeInfo::Flags::kNone)
};
v8::CTypeInfo rcssl_get_ciphersuite = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infossl_get_ciphersuite = v8::CFunctionInfo(rcssl_get_ciphersuite, 3, cargsssl_get_ciphersuite);
v8::CFunction pFssl_get_ciphersuite = v8::CFunction((const void*)&ssl_get_ciphersuiteFast, &infossl_get_ciphersuite);

uint32_t ssl_get_verify_resultFast(void* p, void* p0);
v8::CTypeInfo cargsssl_get_verify_result[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcssl_get_verify_result = v8::CTypeInfo(v8::CTypeInfo::Type::kUint32);
v8::CFunctionInfo infossl_get_verify_result = v8::CFunctionInfo(rcssl_get_verify_result, 2, cargsssl_get_verify_result);
v8::CFunction pFssl_get_verify_result = v8::CFunction((const void*)&ssl_get_verify_resultFast, &infossl_get_verify_result);

int32_t ssl_writeFast(void* p, void* p0, void* p1, uint32_t p2);
v8::CTypeInfo cargsssl_write[4] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint32),
};
v8::CTypeInfo rcssl_write = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
v8::CFunctionInfo infossl_write = v8::CFunctionInfo(rcssl_write, 4, cargsssl_write);
v8::CFunction pFssl_write = v8::CFunction((const void*)&ssl_writeFast, &infossl_write);

int32_t ssl_readFast(void* p, void* p0, void* p1, uint32_t p2);
v8::CTypeInfo cargsssl_read[4] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint32),
};
v8::CTypeInfo rcssl_read = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
v8::CFunctionInfo infossl_read = v8::CFunctionInfo(rcssl_read, 4, cargsssl_read);
v8::CFunction pFssl_read = v8::CFunction((const void*)&ssl_readFast, &infossl_read);

int32_t ssl_close_notifyFast(void* p, void* p0);
v8::CTypeInfo cargsssl_close_notify[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcssl_close_notify = v8::CTypeInfo(v8::CTypeInfo::Type::kInt32);
v8::CFunctionInfo infossl_close_notify = v8::CFunctionInfo(rcssl_close_notify, 2, cargsssl_close_notify);
v8::CFunction pFssl_close_notify = v8::CFunction((const void*)&ssl_close_notifyFast, &infossl_close_notify);

void net_freeFast(void* p, void* p0);
v8::CTypeInfo cargsnet_free[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcnet_free = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infonet_free = v8::CFunctionInfo(rcnet_free, 2, cargsnet_free);
v8::CFunction pFnet_free = v8::CFunction((const void*)&net_freeFast, &infonet_free);

void ssl_freeFast(void* p, void* p0);
v8::CTypeInfo cargsssl_free[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcssl_free = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infossl_free = v8::CFunctionInfo(rcssl_free, 2, cargsssl_free);
v8::CFunction pFssl_free = v8::CFunction((const void*)&ssl_freeFast, &infossl_free);

void ssl_config_freeFast(void* p, void* p0);
v8::CTypeInfo cargsssl_config_free[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcssl_config_free = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infossl_config_free = v8::CFunctionInfo(rcssl_config_free, 2, cargsssl_config_free);
v8::CFunction pFssl_config_free = v8::CFunction((const void*)&ssl_config_freeFast, &infossl_config_free);

void x509_crt_freeFast(void* p, void* p0);
v8::CTypeInfo cargsx509_crt_free[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcx509_crt_free = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infox509_crt_free = v8::CFunctionInfo(rcx509_crt_free, 2, cargsx509_crt_free);
v8::CFunction pFx509_crt_free = v8::CFunction((const void*)&x509_crt_freeFast, &infox509_crt_free);

void ctr_drbg_freeFast(void* p, void* p0);
v8::CTypeInfo cargsctr_drbg_free[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcctr_drbg_free = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infoctr_drbg_free = v8::CFunctionInfo(rcctr_drbg_free, 2, cargsctr_drbg_free);
v8::CFunction pFctr_drbg_free = v8::CFunction((const void*)&ctr_drbg_freeFast, &infoctr_drbg_free);

void entropy_freeFast(void* p, void* p0);
v8::CTypeInfo cargsentropy_free[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcentropy_free = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infoentropy_free = v8::CFunctionInfo(rcentropy_free, 2, cargsentropy_free);
v8::CFunction pFentropy_free = v8::CFunction((const void*)&entropy_freeFast, &infoentropy_free);

void dhm_initFast(void* p, void* p0);
v8::CTypeInfo cargsdhm_init[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcdhm_init = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infodhm_init = v8::CFunctionInfo(rcdhm_init, 2, cargsdhm_init);
v8::CFunction pFdhm_init = v8::CFunction((const void*)&dhm_initFast, &infodhm_init);

void md5_initFast(void* p, void* p0);
v8::CTypeInfo cargsmd5_init[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcmd5_init = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infomd5_init = v8::CFunctionInfo(rcmd5_init, 2, cargsmd5_init);
v8::CFunction pFmd5_init = v8::CFunction((const void*)&md5_initFast, &infomd5_init);

void md5_freeFast(void* p, void* p0);
v8::CTypeInfo cargsmd5_free[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcmd5_free = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infomd5_free = v8::CFunctionInfo(rcmd5_free, 2, cargsmd5_free);
v8::CFunction pFmd5_free = v8::CFunction((const void*)&md5_freeFast, &infomd5_free);

void md5_startsFast(void* p, void* p0);
v8::CTypeInfo cargsmd5_starts[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcmd5_starts = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infomd5_starts = v8::CFunctionInfo(rcmd5_starts, 2, cargsmd5_starts);
v8::CFunction pFmd5_starts = v8::CFunction((const void*)&md5_startsFast, &infomd5_starts);

void md5_updateFast(void* p, void* p0, void* p1, uint32_t p2);
v8::CTypeInfo cargsmd5_update[4] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint32),
};
v8::CTypeInfo rcmd5_update = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infomd5_update = v8::CFunctionInfo(rcmd5_update, 4, cargsmd5_update);
v8::CFunction pFmd5_update = v8::CFunction((const void*)&md5_updateFast, &infomd5_update);

void md5_finishFast(void* p, void* p0, void* p1);
v8::CTypeInfo cargsmd5_finish[3] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcmd5_finish = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infomd5_finish = v8::CFunctionInfo(rcmd5_finish, 3, cargsmd5_finish);
v8::CFunction pFmd5_finish = v8::CFunction((const void*)&md5_finishFast, &infomd5_finish);

void sha256_initFast(void* p, void* p0);
v8::CTypeInfo cargssha256_init[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcsha256_init = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infosha256_init = v8::CFunctionInfo(rcsha256_init, 2, cargssha256_init);
v8::CFunction pFsha256_init = v8::CFunction((const void*)&sha256_initFast, &infosha256_init);

void sha256_freeFast(void* p, void* p0);
v8::CTypeInfo cargssha256_free[2] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcsha256_free = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infosha256_free = v8::CFunctionInfo(rcsha256_free, 2, cargssha256_free);
v8::CFunction pFsha256_free = v8::CFunction((const void*)&sha256_freeFast, &infosha256_free);

void sha256_startsFast(void* p, void* p0, int32_t p1);
v8::CTypeInfo cargssha256_starts[3] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kInt32),
};
v8::CTypeInfo rcsha256_starts = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infosha256_starts = v8::CFunctionInfo(rcsha256_starts, 3, cargssha256_starts);
v8::CFunction pFsha256_starts = v8::CFunction((const void*)&sha256_startsFast, &infosha256_starts);

void sha256_updateFast(void* p, void* p0, void* p1, uint32_t p2);
v8::CTypeInfo cargssha256_update[4] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint32),
};
v8::CTypeInfo rcsha256_update = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infosha256_update = v8::CFunctionInfo(rcsha256_update, 4, cargssha256_update);
v8::CFunction pFsha256_update = v8::CFunction((const void*)&sha256_updateFast, &infosha256_update);

void sha256_finishFast(void* p, void* p0, void* p1);
v8::CTypeInfo cargssha256_finish[3] = {
  v8::CTypeInfo(v8::CTypeInfo::Type::kV8Value),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
  v8::CTypeInfo(v8::CTypeInfo::Type::kUint64),
};
v8::CTypeInfo rcsha256_finish = v8::CTypeInfo(v8::CTypeInfo::Type::kVoid);
v8::CFunctionInfo infosha256_finish = v8::CFunctionInfo(rcsha256_finish, 3, cargssha256_finish);
v8::CFunction pFsha256_finish = v8::CFunction((const void*)&sha256_finishFast, &infosha256_finish);



void x509_crt_initSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_x509_crt* v0 = reinterpret_cast<mbedtls_x509_crt*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  mbedtls_x509_crt_init(v0);
}

void x509_crt_initFast(void* p, void* p0) {
  mbedtls_x509_crt* v0 = reinterpret_cast<mbedtls_x509_crt*>(p0);
  mbedtls_x509_crt_init(v0);
}
void net_initSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_net_context* v0 = reinterpret_cast<mbedtls_net_context*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  mbedtls_net_init(v0);
}

void net_initFast(void* p, void* p0) {
  mbedtls_net_context* v0 = reinterpret_cast<mbedtls_net_context*>(p0);
  mbedtls_net_init(v0);
}
void ssl_initSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_ssl_context* v0 = reinterpret_cast<mbedtls_ssl_context*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  mbedtls_ssl_init(v0);
}

void ssl_initFast(void* p, void* p0) {
  mbedtls_ssl_context* v0 = reinterpret_cast<mbedtls_ssl_context*>(p0);
  mbedtls_ssl_init(v0);
}
void ssl_config_initSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_ssl_config* v0 = reinterpret_cast<mbedtls_ssl_config*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  mbedtls_ssl_config_init(v0);
}

void ssl_config_initFast(void* p, void* p0) {
  mbedtls_ssl_config* v0 = reinterpret_cast<mbedtls_ssl_config*>(p0);
  mbedtls_ssl_config_init(v0);
}
void entropy_initSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_entropy_context* v0 = reinterpret_cast<mbedtls_entropy_context*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  mbedtls_entropy_init(v0);
}

void entropy_initFast(void* p, void* p0) {
  mbedtls_entropy_context* v0 = reinterpret_cast<mbedtls_entropy_context*>(p0);
  mbedtls_entropy_init(v0);
}
void ctr_drbg_initSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_ctr_drbg_context* v0 = reinterpret_cast<mbedtls_ctr_drbg_context*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  mbedtls_ctr_drbg_init(v0);
}

void ctr_drbg_initFast(void* p, void* p0) {
  mbedtls_ctr_drbg_context* v0 = reinterpret_cast<mbedtls_ctr_drbg_context*>(p0);
  mbedtls_ctr_drbg_init(v0);
}
void x509_crt_parse_derSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  mbedtls_x509_crt* v0 = reinterpret_cast<mbedtls_x509_crt*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  const unsigned char* v1 = reinterpret_cast<const unsigned char*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  uint32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t rc = mbedtls_x509_crt_parse_der(v0, v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t x509_crt_parse_derFast(void* p, void* p0, void* p1, uint32_t p2) {
  mbedtls_x509_crt* v0 = reinterpret_cast<mbedtls_x509_crt*>(p0);
  const unsigned char* v1 = reinterpret_cast<const unsigned char*>(p1);
  uint32_t v2 = p2;
  return mbedtls_x509_crt_parse_der(v0, v1, v2);
}
void debug_set_thresholdSlow(const FunctionCallbackInfo<Value> &args) {
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  mbedtls_debug_set_threshold(v0);
}

void debug_set_thresholdFast(void* p, int32_t p0) {
  int32_t v0 = p0;
  mbedtls_debug_set_threshold(v0);
}
void ctr_drbg_seedSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  mbedtls_ctr_drbg_context* v0 = reinterpret_cast<mbedtls_ctr_drbg_context*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  mbedtls_entropy_callback v1 = reinterpret_cast<mbedtls_entropy_callback>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  void* v2 = reinterpret_cast<void*>((uint64_t)Local<Integer>::Cast(args[2])->Value());
  const unsigned char* v3 = reinterpret_cast<const unsigned char*>((uint64_t)Local<Integer>::Cast(args[3])->Value());
  uint32_t v4 = Local<Integer>::Cast(args[4])->Value();
  int32_t rc = mbedtls_ctr_drbg_seed(v0, v1, v2, v3, v4);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t ctr_drbg_seedFast(void* p, void* p0, void* p1, void* p2, void* p3, uint32_t p4) {
  mbedtls_ctr_drbg_context* v0 = reinterpret_cast<mbedtls_ctr_drbg_context*>(p0);
  mbedtls_entropy_callback v1 = reinterpret_cast<mbedtls_entropy_callback>(p1);
  void* v2 = reinterpret_cast<void*>(p2);
  const unsigned char* v3 = reinterpret_cast<const unsigned char*>(p3);
  uint32_t v4 = p4;
  return mbedtls_ctr_drbg_seed(v0, v1, v2, v3, v4);
}
void exitSlow(const FunctionCallbackInfo<Value> &args) {
  int32_t v0 = Local<Integer>::Cast(args[0])->Value();
  mbedtls_exit(v0);
}

void exitFast(void* p, int32_t p0) {
  int32_t v0 = p0;
  mbedtls_exit(v0);
}
void x509_crt_parseSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  mbedtls_x509_crt* v0 = reinterpret_cast<mbedtls_x509_crt*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  const unsigned char* v1 = reinterpret_cast<const unsigned char*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  uint32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t rc = mbedtls_x509_crt_parse(v0, v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t x509_crt_parseFast(void* p, void* p0, void* p1, uint32_t p2) {
  mbedtls_x509_crt* v0 = reinterpret_cast<mbedtls_x509_crt*>(p0);
  const unsigned char* v1 = reinterpret_cast<const unsigned char*>(p1);
  uint32_t v2 = p2;
  return mbedtls_x509_crt_parse(v0, v1, v2);
}
void ssl_config_defaultsSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  mbedtls_ssl_config* v0 = reinterpret_cast<mbedtls_ssl_config*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t v1 = Local<Integer>::Cast(args[1])->Value();
  int32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t v3 = Local<Integer>::Cast(args[3])->Value();
  int32_t rc = mbedtls_ssl_config_defaults(v0, v1, v2, v3);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t ssl_config_defaultsFast(void* p, void* p0, int32_t p1, int32_t p2, int32_t p3) {
  mbedtls_ssl_config* v0 = reinterpret_cast<mbedtls_ssl_config*>(p0);
  int32_t v1 = p1;
  int32_t v2 = p2;
  int32_t v3 = p3;
  return mbedtls_ssl_config_defaults(v0, v1, v2, v3);
}
void ssl_conf_max_frag_lenSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  mbedtls_ssl_config* v0 = reinterpret_cast<mbedtls_ssl_config*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  uint8_t v1 = Local<Integer>::Cast(args[1])->Value();
  int32_t rc = mbedtls_ssl_conf_max_frag_len(v0, v1);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t ssl_conf_max_frag_lenFast(void* p, void* p0, uint8_t p1) {
  mbedtls_ssl_config* v0 = reinterpret_cast<mbedtls_ssl_config*>(p0);
  uint8_t v1 = p1;
  return mbedtls_ssl_conf_max_frag_len(v0, v1);
}
void ssl_conf_rngSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_ssl_config* v0 = reinterpret_cast<mbedtls_ssl_config*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  mbedtls_rng_callback v1 = reinterpret_cast<mbedtls_rng_callback>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  void* v2 = reinterpret_cast<void*>((uint64_t)Local<Integer>::Cast(args[2])->Value());
  mbedtls_ssl_conf_rng(v0, v1, v2);
}

void ssl_conf_rngFast(void* p, void* p0, void* p1, void* p2) {
  mbedtls_ssl_config* v0 = reinterpret_cast<mbedtls_ssl_config*>(p0);
  mbedtls_rng_callback v1 = reinterpret_cast<mbedtls_rng_callback>(p1);
  void* v2 = reinterpret_cast<void*>(p2);
  mbedtls_ssl_conf_rng(v0, v1, v2);
}
void ssl_conf_dbgSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_ssl_config* v0 = reinterpret_cast<mbedtls_ssl_config*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  mbedtls_dbg_callback v1 = reinterpret_cast<mbedtls_dbg_callback>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  void* v2 = reinterpret_cast<void*>((uint64_t)Local<Integer>::Cast(args[2])->Value());
  mbedtls_ssl_conf_dbg(v0, v1, v2);
}

void ssl_conf_dbgFast(void* p, void* p0, void* p1, void* p2) {
  mbedtls_ssl_config* v0 = reinterpret_cast<mbedtls_ssl_config*>(p0);
  mbedtls_dbg_callback v1 = reinterpret_cast<mbedtls_dbg_callback>(p1);
  void* v2 = reinterpret_cast<void*>(p2);
  mbedtls_ssl_conf_dbg(v0, v1, v2);
}
void ssl_conf_read_timeoutSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_ssl_config* v0 = reinterpret_cast<mbedtls_ssl_config*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  uint32_t v1 = Local<Integer>::Cast(args[1])->Value();
  mbedtls_ssl_conf_read_timeout(v0, v1);
}

void ssl_conf_read_timeoutFast(void* p, void* p0, uint32_t p1) {
  mbedtls_ssl_config* v0 = reinterpret_cast<mbedtls_ssl_config*>(p0);
  uint32_t v1 = p1;
  mbedtls_ssl_conf_read_timeout(v0, v1);
}
void ssl_conf_session_ticketsSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_ssl_config* v0 = reinterpret_cast<mbedtls_ssl_config*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t v1 = Local<Integer>::Cast(args[1])->Value();
  mbedtls_ssl_conf_session_tickets(v0, v1);
}

void ssl_conf_session_ticketsFast(void* p, void* p0, int32_t p1) {
  mbedtls_ssl_config* v0 = reinterpret_cast<mbedtls_ssl_config*>(p0);
  int32_t v1 = p1;
  mbedtls_ssl_conf_session_tickets(v0, v1);
}
void ssl_conf_renegotiationSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_ssl_config* v0 = reinterpret_cast<mbedtls_ssl_config*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t v1 = Local<Integer>::Cast(args[1])->Value();
  mbedtls_ssl_conf_renegotiation(v0, v1);
}

void ssl_conf_renegotiationFast(void* p, void* p0, int32_t p1) {
  mbedtls_ssl_config* v0 = reinterpret_cast<mbedtls_ssl_config*>(p0);
  int32_t v1 = p1;
  mbedtls_ssl_conf_renegotiation(v0, v1);
}
void ssl_conf_ca_chainSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_ssl_config* v0 = reinterpret_cast<mbedtls_ssl_config*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  mbedtls_x509_crt* v1 = reinterpret_cast<mbedtls_x509_crt*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  mbedtls_x509_crl* v2 = reinterpret_cast<mbedtls_x509_crl*>((uint64_t)Local<Integer>::Cast(args[2])->Value());
  mbedtls_ssl_conf_ca_chain(v0, v1, v2);
}

void ssl_conf_ca_chainFast(void* p, void* p0, void* p1, void* p2) {
  mbedtls_ssl_config* v0 = reinterpret_cast<mbedtls_ssl_config*>(p0);
  mbedtls_x509_crt* v1 = reinterpret_cast<mbedtls_x509_crt*>(p1);
  mbedtls_x509_crl* v2 = reinterpret_cast<mbedtls_x509_crl*>(p2);
  mbedtls_ssl_conf_ca_chain(v0, v1, v2);
}
void ssl_conf_min_versionSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_ssl_config* v0 = reinterpret_cast<mbedtls_ssl_config*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t v1 = Local<Integer>::Cast(args[1])->Value();
  int32_t v2 = Local<Integer>::Cast(args[2])->Value();
  mbedtls_ssl_conf_min_version(v0, v1, v2);
}

void ssl_conf_min_versionFast(void* p, void* p0, int32_t p1, int32_t p2) {
  mbedtls_ssl_config* v0 = reinterpret_cast<mbedtls_ssl_config*>(p0);
  int32_t v1 = p1;
  int32_t v2 = p2;
  mbedtls_ssl_conf_min_version(v0, v1, v2);
}
void ssl_conf_max_versionSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_ssl_config* v0 = reinterpret_cast<mbedtls_ssl_config*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t v1 = Local<Integer>::Cast(args[1])->Value();
  int32_t v2 = Local<Integer>::Cast(args[2])->Value();
  mbedtls_ssl_conf_max_version(v0, v1, v2);
}

void ssl_conf_max_versionFast(void* p, void* p0, int32_t p1, int32_t p2) {
  mbedtls_ssl_config* v0 = reinterpret_cast<mbedtls_ssl_config*>(p0);
  int32_t v1 = p1;
  int32_t v2 = p2;
  mbedtls_ssl_conf_max_version(v0, v1, v2);
}
void ssl_setupSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  mbedtls_ssl_context* v0 = reinterpret_cast<mbedtls_ssl_context*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  mbedtls_ssl_config* v1 = reinterpret_cast<mbedtls_ssl_config*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  int32_t rc = mbedtls_ssl_setup(v0, v1);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t ssl_setupFast(void* p, void* p0, void* p1) {
  mbedtls_ssl_context* v0 = reinterpret_cast<mbedtls_ssl_context*>(p0);
  mbedtls_ssl_config* v1 = reinterpret_cast<mbedtls_ssl_config*>(p1);
  return mbedtls_ssl_setup(v0, v1);
}
void ssl_set_hostnameSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  mbedtls_ssl_context* v0 = reinterpret_cast<mbedtls_ssl_context*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  String::Utf8Value v1(isolate, args[1]);
  int32_t rc = mbedtls_ssl_set_hostname(v0, *v1);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t ssl_set_hostnameFast(void* p, void* p0, struct FastOneByteString* const p1) {
  mbedtls_ssl_context* v0 = reinterpret_cast<mbedtls_ssl_context*>(p0);
  struct FastOneByteString* const v1 = p1;
  return mbedtls_ssl_set_hostname(v0, v1->data);
}
void ssl_set_bioSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_ssl_context* v0 = reinterpret_cast<mbedtls_ssl_context*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  void* v1 = reinterpret_cast<void*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  mbedtls_ssl_send_t* v2 = reinterpret_cast<mbedtls_ssl_send_t*>((uint64_t)Local<Integer>::Cast(args[2])->Value());
  mbedtls_ssl_recv_t* v3 = reinterpret_cast<mbedtls_ssl_recv_t*>((uint64_t)Local<Integer>::Cast(args[3])->Value());
  mbedtls_ssl_recv_timeout_t* v4 = reinterpret_cast<mbedtls_ssl_recv_timeout_t*>((uint64_t)Local<Integer>::Cast(args[4])->Value());
  mbedtls_ssl_set_bio(v0, v1, v2, v3, v4);
}

void ssl_set_bioFast(void* p, void* p0, void* p1, void* p2, void* p3, void* p4) {
  mbedtls_ssl_context* v0 = reinterpret_cast<mbedtls_ssl_context*>(p0);
  void* v1 = reinterpret_cast<void*>(p1);
  mbedtls_ssl_send_t* v2 = reinterpret_cast<mbedtls_ssl_send_t*>(p2);
  mbedtls_ssl_recv_t* v3 = reinterpret_cast<mbedtls_ssl_recv_t*>(p3);
  mbedtls_ssl_recv_timeout_t* v4 = reinterpret_cast<mbedtls_ssl_recv_timeout_t*>(p4);
  mbedtls_ssl_set_bio(v0, v1, v2, v3, v4);
}
void net_connectSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  mbedtls_net_context* v0 = reinterpret_cast<mbedtls_net_context*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  String::Utf8Value v1(isolate, args[1]);
  String::Utf8Value v2(isolate, args[2]);
  int32_t v3 = Local<Integer>::Cast(args[3])->Value();
  int32_t rc = mbedtls_net_connect(v0, *v1, *v2, v3);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t net_connectFast(void* p, void* p0, struct FastOneByteString* const p1, struct FastOneByteString* const p2, int32_t p3) {
  mbedtls_net_context* v0 = reinterpret_cast<mbedtls_net_context*>(p0);
  struct FastOneByteString* const v1 = p1;
  struct FastOneByteString* const v2 = p2;
  int32_t v3 = p3;
  return mbedtls_net_connect(v0, v1->data, v2->data, v3);
}
void net_set_blockSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  mbedtls_net_context* v0 = reinterpret_cast<mbedtls_net_context*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t rc = mbedtls_net_set_block(v0);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t net_set_blockFast(void* p, void* p0) {
  mbedtls_net_context* v0 = reinterpret_cast<mbedtls_net_context*>(p0);
  return mbedtls_net_set_block(v0);
}
void ssl_handshakeSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  mbedtls_ssl_context* v0 = reinterpret_cast<mbedtls_ssl_context*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t rc = mbedtls_ssl_handshake(v0);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t ssl_handshakeFast(void* p, void* p0) {
  mbedtls_ssl_context* v0 = reinterpret_cast<mbedtls_ssl_context*>(p0);
  return mbedtls_ssl_handshake(v0);
}
void ssl_get_versionSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_ssl_context* v0 = reinterpret_cast<mbedtls_ssl_context*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  const char* rc = mbedtls_ssl_get_version(v0);
  Local<ArrayBuffer> ab = args[1].As<Uint32Array>()->Buffer();
  ((const char**)ab->Data())[0] = rc;
}

void ssl_get_versionFast(void* p, void* p0, struct FastApiTypedArray* const p_ret) {
  mbedtls_ssl_context* v0 = reinterpret_cast<mbedtls_ssl_context*>(p0);
  const char* r = mbedtls_ssl_get_version(v0);
  ((const char**)p_ret->data)[0] = r;

}
void ssl_get_ciphersuiteSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_ssl_context* v0 = reinterpret_cast<mbedtls_ssl_context*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  const char* rc = mbedtls_ssl_get_ciphersuite(v0);
  Local<ArrayBuffer> ab = args[1].As<Uint32Array>()->Buffer();
  ((const char**)ab->Data())[0] = rc;
}

void ssl_get_ciphersuiteFast(void* p, void* p0, struct FastApiTypedArray* const p_ret) {
  mbedtls_ssl_context* v0 = reinterpret_cast<mbedtls_ssl_context*>(p0);
  const char* r = mbedtls_ssl_get_ciphersuite(v0);
  ((const char**)p_ret->data)[0] = r;

}
void ssl_get_verify_resultSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  mbedtls_ssl_context* v0 = reinterpret_cast<mbedtls_ssl_context*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  uint32_t rc = mbedtls_ssl_get_verify_result(v0);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

uint32_t ssl_get_verify_resultFast(void* p, void* p0) {
  mbedtls_ssl_context* v0 = reinterpret_cast<mbedtls_ssl_context*>(p0);
  return mbedtls_ssl_get_verify_result(v0);
}
void ssl_writeSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  mbedtls_ssl_context* v0 = reinterpret_cast<mbedtls_ssl_context*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  const unsigned char* v1 = reinterpret_cast<const unsigned char*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  uint32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t rc = mbedtls_ssl_write(v0, v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t ssl_writeFast(void* p, void* p0, void* p1, uint32_t p2) {
  mbedtls_ssl_context* v0 = reinterpret_cast<mbedtls_ssl_context*>(p0);
  const unsigned char* v1 = reinterpret_cast<const unsigned char*>(p1);
  uint32_t v2 = p2;
  return mbedtls_ssl_write(v0, v1, v2);
}
void ssl_readSlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  mbedtls_ssl_context* v0 = reinterpret_cast<mbedtls_ssl_context*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  unsigned char* v1 = reinterpret_cast<unsigned char*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  uint32_t v2 = Local<Integer>::Cast(args[2])->Value();
  int32_t rc = mbedtls_ssl_read(v0, v1, v2);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t ssl_readFast(void* p, void* p0, void* p1, uint32_t p2) {
  mbedtls_ssl_context* v0 = reinterpret_cast<mbedtls_ssl_context*>(p0);
  unsigned char* v1 = reinterpret_cast<unsigned char*>(p1);
  uint32_t v2 = p2;
  return mbedtls_ssl_read(v0, v1, v2);
}
void ssl_close_notifySlow(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();
  mbedtls_ssl_context* v0 = reinterpret_cast<mbedtls_ssl_context*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t rc = mbedtls_ssl_close_notify(v0);
  args.GetReturnValue().Set(Number::New(isolate, rc));
}

int32_t ssl_close_notifyFast(void* p, void* p0) {
  mbedtls_ssl_context* v0 = reinterpret_cast<mbedtls_ssl_context*>(p0);
  return mbedtls_ssl_close_notify(v0);
}
void net_freeSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_net_context* v0 = reinterpret_cast<mbedtls_net_context*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  mbedtls_net_free(v0);
}

void net_freeFast(void* p, void* p0) {
  mbedtls_net_context* v0 = reinterpret_cast<mbedtls_net_context*>(p0);
  mbedtls_net_free(v0);
}
void ssl_freeSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_ssl_context* v0 = reinterpret_cast<mbedtls_ssl_context*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  mbedtls_ssl_free(v0);
}

void ssl_freeFast(void* p, void* p0) {
  mbedtls_ssl_context* v0 = reinterpret_cast<mbedtls_ssl_context*>(p0);
  mbedtls_ssl_free(v0);
}
void ssl_config_freeSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_ssl_config* v0 = reinterpret_cast<mbedtls_ssl_config*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  mbedtls_ssl_config_free(v0);
}

void ssl_config_freeFast(void* p, void* p0) {
  mbedtls_ssl_config* v0 = reinterpret_cast<mbedtls_ssl_config*>(p0);
  mbedtls_ssl_config_free(v0);
}
void x509_crt_freeSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_x509_crt* v0 = reinterpret_cast<mbedtls_x509_crt*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  mbedtls_x509_crt_free(v0);
}

void x509_crt_freeFast(void* p, void* p0) {
  mbedtls_x509_crt* v0 = reinterpret_cast<mbedtls_x509_crt*>(p0);
  mbedtls_x509_crt_free(v0);
}
void ctr_drbg_freeSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_ctr_drbg_context* v0 = reinterpret_cast<mbedtls_ctr_drbg_context*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  mbedtls_ctr_drbg_free(v0);
}

void ctr_drbg_freeFast(void* p, void* p0) {
  mbedtls_ctr_drbg_context* v0 = reinterpret_cast<mbedtls_ctr_drbg_context*>(p0);
  mbedtls_ctr_drbg_free(v0);
}
void entropy_freeSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_entropy_context* v0 = reinterpret_cast<mbedtls_entropy_context*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  mbedtls_entropy_free(v0);
}

void entropy_freeFast(void* p, void* p0) {
  mbedtls_entropy_context* v0 = reinterpret_cast<mbedtls_entropy_context*>(p0);
  mbedtls_entropy_free(v0);
}
void dhm_initSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_dhm_context* v0 = reinterpret_cast<mbedtls_dhm_context*>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  mbedtls_dhm_init(v0);
}

void dhm_initFast(void* p, void* p0) {
  mbedtls_dhm_context* v0 = reinterpret_cast<mbedtls_dhm_context*>(p0);
  mbedtls_dhm_init(v0);
}
void md5_initSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_md5_context * v0 = reinterpret_cast<mbedtls_md5_context *>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  mbedtls_md5_init(v0);
}

void md5_initFast(void* p, void* p0) {
  mbedtls_md5_context * v0 = reinterpret_cast<mbedtls_md5_context *>(p0);
  mbedtls_md5_init(v0);
}
void md5_freeSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_md5_context * v0 = reinterpret_cast<mbedtls_md5_context *>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  mbedtls_md5_free(v0);
}

void md5_freeFast(void* p, void* p0) {
  mbedtls_md5_context * v0 = reinterpret_cast<mbedtls_md5_context *>(p0);
  mbedtls_md5_free(v0);
}
void md5_startsSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_md5_context * v0 = reinterpret_cast<mbedtls_md5_context *>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  mbedtls_md5_starts(v0);
}

void md5_startsFast(void* p, void* p0) {
  mbedtls_md5_context * v0 = reinterpret_cast<mbedtls_md5_context *>(p0);
  mbedtls_md5_starts(v0);
}
void md5_updateSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_md5_context * v0 = reinterpret_cast<mbedtls_md5_context *>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  const unsigned char* v1 = reinterpret_cast<const unsigned char*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  uint32_t v2 = Local<Integer>::Cast(args[2])->Value();
  mbedtls_md5_update(v0, v1, v2);
}

void md5_updateFast(void* p, void* p0, void* p1, uint32_t p2) {
  mbedtls_md5_context * v0 = reinterpret_cast<mbedtls_md5_context *>(p0);
  const unsigned char* v1 = reinterpret_cast<const unsigned char*>(p1);
  uint32_t v2 = p2;
  mbedtls_md5_update(v0, v1, v2);
}
void md5_finishSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_md5_context * v0 = reinterpret_cast<mbedtls_md5_context *>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  unsigned char* v1 = reinterpret_cast<unsigned char*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  mbedtls_md5_finish(v0, v1);
}

void md5_finishFast(void* p, void* p0, void* p1) {
  mbedtls_md5_context * v0 = reinterpret_cast<mbedtls_md5_context *>(p0);
  unsigned char* v1 = reinterpret_cast<unsigned char*>(p1);
  mbedtls_md5_finish(v0, v1);
}
void sha256_initSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_sha256_context * v0 = reinterpret_cast<mbedtls_sha256_context *>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  mbedtls_sha256_init(v0);
}

void sha256_initFast(void* p, void* p0) {
  mbedtls_sha256_context * v0 = reinterpret_cast<mbedtls_sha256_context *>(p0);
  mbedtls_sha256_init(v0);
}
void sha256_freeSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_sha256_context * v0 = reinterpret_cast<mbedtls_sha256_context *>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  mbedtls_sha256_free(v0);
}

void sha256_freeFast(void* p, void* p0) {
  mbedtls_sha256_context * v0 = reinterpret_cast<mbedtls_sha256_context *>(p0);
  mbedtls_sha256_free(v0);
}
void sha256_startsSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_sha256_context * v0 = reinterpret_cast<mbedtls_sha256_context *>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  int32_t v1 = Local<Integer>::Cast(args[1])->Value();
  mbedtls_sha256_starts(v0, v1);
}

void sha256_startsFast(void* p, void* p0, int32_t p1) {
  mbedtls_sha256_context * v0 = reinterpret_cast<mbedtls_sha256_context *>(p0);
  int32_t v1 = p1;
  mbedtls_sha256_starts(v0, v1);
}
void sha256_updateSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_sha256_context * v0 = reinterpret_cast<mbedtls_sha256_context *>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  const unsigned char* v1 = reinterpret_cast<const unsigned char*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  uint32_t v2 = Local<Integer>::Cast(args[2])->Value();
  mbedtls_sha256_update(v0, v1, v2);
}

void sha256_updateFast(void* p, void* p0, void* p1, uint32_t p2) {
  mbedtls_sha256_context * v0 = reinterpret_cast<mbedtls_sha256_context *>(p0);
  const unsigned char* v1 = reinterpret_cast<const unsigned char*>(p1);
  uint32_t v2 = p2;
  mbedtls_sha256_update(v0, v1, v2);
}
void sha256_finishSlow(const FunctionCallbackInfo<Value> &args) {
  mbedtls_sha256_context * v0 = reinterpret_cast<mbedtls_sha256_context *>((uint64_t)Local<Integer>::Cast(args[0])->Value());
  unsigned char* v1 = reinterpret_cast<unsigned char*>((uint64_t)Local<Integer>::Cast(args[1])->Value());
  mbedtls_sha256_finish(v0, v1);
}

void sha256_finishFast(void* p, void* p0, void* p1) {
  mbedtls_sha256_context * v0 = reinterpret_cast<mbedtls_sha256_context *>(p0);
  unsigned char* v1 = reinterpret_cast<unsigned char*>(p1);
  mbedtls_sha256_finish(v0, v1);
}

void Init(Isolate* isolate, Local<ObjectTemplate> target) {
  Local<ObjectTemplate> module = ObjectTemplate::New(isolate);
  SET_FAST_METHOD(isolate, module, "x509_crt_init", &pFx509_crt_init, x509_crt_initSlow);
  SET_FAST_METHOD(isolate, module, "net_init", &pFnet_init, net_initSlow);
  SET_FAST_METHOD(isolate, module, "ssl_init", &pFssl_init, ssl_initSlow);
  SET_FAST_METHOD(isolate, module, "ssl_config_init", &pFssl_config_init, ssl_config_initSlow);
  SET_FAST_METHOD(isolate, module, "entropy_init", &pFentropy_init, entropy_initSlow);
  SET_FAST_METHOD(isolate, module, "ctr_drbg_init", &pFctr_drbg_init, ctr_drbg_initSlow);
  SET_FAST_METHOD(isolate, module, "x509_crt_parse_der", &pFx509_crt_parse_der, x509_crt_parse_derSlow);
  SET_FAST_METHOD(isolate, module, "debug_set_threshold", &pFdebug_set_threshold, debug_set_thresholdSlow);
  SET_FAST_METHOD(isolate, module, "ctr_drbg_seed", &pFctr_drbg_seed, ctr_drbg_seedSlow);
  SET_FAST_METHOD(isolate, module, "exit", &pFexit, exitSlow);
  SET_FAST_METHOD(isolate, module, "x509_crt_parse", &pFx509_crt_parse, x509_crt_parseSlow);
  SET_FAST_METHOD(isolate, module, "ssl_config_defaults", &pFssl_config_defaults, ssl_config_defaultsSlow);
  SET_FAST_METHOD(isolate, module, "ssl_conf_max_frag_len", &pFssl_conf_max_frag_len, ssl_conf_max_frag_lenSlow);
  SET_FAST_METHOD(isolate, module, "ssl_conf_rng", &pFssl_conf_rng, ssl_conf_rngSlow);
  SET_FAST_METHOD(isolate, module, "ssl_conf_dbg", &pFssl_conf_dbg, ssl_conf_dbgSlow);
  SET_FAST_METHOD(isolate, module, "ssl_conf_read_timeout", &pFssl_conf_read_timeout, ssl_conf_read_timeoutSlow);
  SET_FAST_METHOD(isolate, module, "ssl_conf_session_tickets", &pFssl_conf_session_tickets, ssl_conf_session_ticketsSlow);
  SET_FAST_METHOD(isolate, module, "ssl_conf_renegotiation", &pFssl_conf_renegotiation, ssl_conf_renegotiationSlow);
  SET_FAST_METHOD(isolate, module, "ssl_conf_ca_chain", &pFssl_conf_ca_chain, ssl_conf_ca_chainSlow);
  SET_FAST_METHOD(isolate, module, "ssl_conf_min_version", &pFssl_conf_min_version, ssl_conf_min_versionSlow);
  SET_FAST_METHOD(isolate, module, "ssl_conf_max_version", &pFssl_conf_max_version, ssl_conf_max_versionSlow);
  SET_FAST_METHOD(isolate, module, "ssl_setup", &pFssl_setup, ssl_setupSlow);
  SET_FAST_METHOD(isolate, module, "ssl_set_hostname", &pFssl_set_hostname, ssl_set_hostnameSlow);
  SET_FAST_METHOD(isolate, module, "ssl_set_bio", &pFssl_set_bio, ssl_set_bioSlow);
  SET_FAST_METHOD(isolate, module, "net_connect", &pFnet_connect, net_connectSlow);
  SET_FAST_METHOD(isolate, module, "net_set_block", &pFnet_set_block, net_set_blockSlow);
  SET_FAST_METHOD(isolate, module, "ssl_handshake", &pFssl_handshake, ssl_handshakeSlow);
  SET_FAST_METHOD(isolate, module, "ssl_get_version", &pFssl_get_version, ssl_get_versionSlow);
  SET_FAST_METHOD(isolate, module, "ssl_get_ciphersuite", &pFssl_get_ciphersuite, ssl_get_ciphersuiteSlow);
  SET_FAST_METHOD(isolate, module, "ssl_get_verify_result", &pFssl_get_verify_result, ssl_get_verify_resultSlow);
  SET_FAST_METHOD(isolate, module, "ssl_write", &pFssl_write, ssl_writeSlow);
  SET_FAST_METHOD(isolate, module, "ssl_read", &pFssl_read, ssl_readSlow);
  SET_FAST_METHOD(isolate, module, "ssl_close_notify", &pFssl_close_notify, ssl_close_notifySlow);
  SET_FAST_METHOD(isolate, module, "net_free", &pFnet_free, net_freeSlow);
  SET_FAST_METHOD(isolate, module, "ssl_free", &pFssl_free, ssl_freeSlow);
  SET_FAST_METHOD(isolate, module, "ssl_config_free", &pFssl_config_free, ssl_config_freeSlow);
  SET_FAST_METHOD(isolate, module, "x509_crt_free", &pFx509_crt_free, x509_crt_freeSlow);
  SET_FAST_METHOD(isolate, module, "ctr_drbg_free", &pFctr_drbg_free, ctr_drbg_freeSlow);
  SET_FAST_METHOD(isolate, module, "entropy_free", &pFentropy_free, entropy_freeSlow);
  SET_FAST_METHOD(isolate, module, "dhm_init", &pFdhm_init, dhm_initSlow);
  SET_FAST_METHOD(isolate, module, "md5_init", &pFmd5_init, md5_initSlow);
  SET_FAST_METHOD(isolate, module, "md5_free", &pFmd5_free, md5_freeSlow);
  SET_FAST_METHOD(isolate, module, "md5_starts", &pFmd5_starts, md5_startsSlow);
  SET_FAST_METHOD(isolate, module, "md5_update", &pFmd5_update, md5_updateSlow);
  SET_FAST_METHOD(isolate, module, "md5_finish", &pFmd5_finish, md5_finishSlow);
  SET_FAST_METHOD(isolate, module, "sha256_init", &pFsha256_init, sha256_initSlow);
  SET_FAST_METHOD(isolate, module, "sha256_free", &pFsha256_free, sha256_freeSlow);
  SET_FAST_METHOD(isolate, module, "sha256_starts", &pFsha256_starts, sha256_startsSlow);
  SET_FAST_METHOD(isolate, module, "sha256_update", &pFsha256_update, sha256_updateSlow);
  SET_FAST_METHOD(isolate, module, "sha256_finish", &pFsha256_finish, sha256_finishSlow);

  SET_VALUE(isolate, module, "MBEDTLS_SSL_IS_CLIENT", Integer::New(isolate, MBEDTLS_SSL_IS_CLIENT));
  SET_VALUE(isolate, module, "MBEDTLS_SSL_TRANSPORT_STREAM", Integer::New(isolate, MBEDTLS_SSL_TRANSPORT_STREAM));
  SET_VALUE(isolate, module, "MBEDTLS_SSL_PRESET_DEFAULT", Integer::New(isolate, MBEDTLS_SSL_PRESET_DEFAULT));
  SET_VALUE(isolate, module, "MBEDTLS_SSL_MAX_FRAG_LEN_NONE", Integer::New(isolate, MBEDTLS_SSL_MAX_FRAG_LEN_NONE));
  SET_VALUE(isolate, module, "MBEDTLS_SSL_SESSION_TICKETS_ENABLED", Integer::New(isolate, MBEDTLS_SSL_SESSION_TICKETS_ENABLED));
  SET_VALUE(isolate, module, "MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_ALL", Integer::New(isolate, MBEDTLS_SSL_TLS1_3_KEY_EXCHANGE_MODE_ALL));
  SET_VALUE(isolate, module, "MBEDTLS_SSL_RENEGOTIATION_DISABLED", Integer::New(isolate, MBEDTLS_SSL_RENEGOTIATION_DISABLED));
  SET_VALUE(isolate, module, "MBEDTLS_SSL_MAJOR_VERSION_3", Integer::New(isolate, MBEDTLS_SSL_MAJOR_VERSION_3));
  SET_VALUE(isolate, module, "MBEDTLS_SSL_MINOR_VERSION_4", Integer::New(isolate, MBEDTLS_SSL_MINOR_VERSION_4));
  SET_VALUE(isolate, module, "MBEDTLS_NET_PROTO_TCP", Integer::New(isolate, MBEDTLS_NET_PROTO_TCP));
  SET_VALUE(isolate, module, "MBEDTLS_ERR_SSL_WANT_READ", Integer::New(isolate, MBEDTLS_ERR_SSL_WANT_READ));
  SET_VALUE(isolate, module, "MBEDTLS_ERR_SSL_WANT_WRITE", Integer::New(isolate, MBEDTLS_ERR_SSL_WANT_WRITE));
  SET_VALUE(isolate, module, "MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS", Integer::New(isolate, MBEDTLS_ERR_SSL_CRYPTO_IN_PROGRESS));
  SET_VALUE(isolate, module, "MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY", Integer::New(isolate, MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY));

  SET_VALUE(isolate, module, "struct_mbedtls_net_context_size", Integer::New(isolate, sizeof(mbedtls_net_context)));
  SET_VALUE(isolate, module, "struct_mbedtls_x509_crt_size", Integer::New(isolate, sizeof(mbedtls_x509_crt)));
  SET_VALUE(isolate, module, "struct_mbedtls_entropy_context_size", Integer::New(isolate, sizeof(mbedtls_entropy_context)));
  SET_VALUE(isolate, module, "struct_mbedtls_ssl_context_size", Integer::New(isolate, sizeof(mbedtls_ssl_context)));
  SET_VALUE(isolate, module, "struct_mbedtls_ssl_config_size", Integer::New(isolate, sizeof(mbedtls_ssl_config)));
  SET_VALUE(isolate, module, "struct_mbedtls_ctr_drbg_context_size", Integer::New(isolate, sizeof(mbedtls_ctr_drbg_context)));
  SET_VALUE(isolate, module, "struct_mbedtls_dhm_context_size", Integer::New(isolate, sizeof(mbedtls_dhm_context)));
  SET_VALUE(isolate, module, "struct_mbedtls_md5_context_size", Integer::New(isolate, sizeof(mbedtls_md5_context)));
  SET_VALUE(isolate, module, "struct_mbedtls_sha256_context_size", Integer::New(isolate, sizeof(mbedtls_sha256_context)));

  SET_MODULE(isolate, target, "mbedtls", module);
}
} // namespace mbedtls
} // namespace lo

extern "C" {
  void* _register_mbedtls() {
    return (void*)lo::mbedtls::Init;
  }
}
